"use client";

import React, { useState, useEffect } from 'react';
import { Character, Scene } from '@/lib/types';

interface QuizExperienceProps {
  character: Character;
  scene: Scene;
}

interface QuizQuestion {
  id: string;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
}

interface QuizState {
  currentQuestionIndex: number;
  score: number;
  answeredQuestions: number;
  selectedAnswer: number | null;
  showExplanation: boolean;
  isComplete: boolean;
}

export const QuizExperience: React.FC<QuizExperienceProps> = ({ character, scene }) => {
  const [quizState, setQuizState] = useState<QuizState>({
    currentQuestionIndex: 0,
    score: 0,
    answeredQuestions: 0,
    selectedAnswer: null,
    showExplanation: false,
    isComplete: false
  });

  const [questions, setQuestions] = useState<QuizQuestion[]>([]);
  const [loading, setLoading] = useState(true);

  // Placeholder questions - in the future, these would be generated by AI
  const placeholderQuestions: QuizQuestion[] = [
    {
      id: "1",
      question: "Which spice is known as the 'king of spices' and is one of the most expensive spices in the world?",
      options: ["Cardamom", "Saffron", "Vanilla", "Black Pepper"],
      correctAnswer: 1,
      explanation: "Saffron is known as the 'king of spices' due to its intense flavor, aroma, and high price. It's harvested from the flower of Crocus sativus and requires about 150 flowers to produce just 1 gram of saffron."
    },
    {
      id: "2", 
      question: "What cooking method involves cooking food slowly in liquid at a temperature just below boiling?",
      options: ["SautÃ©ing", "Braising", "Poaching", "Grilling"],
      correctAnswer: 2,
      explanation: "Poaching involves cooking food gently in liquid (water, broth, wine, etc.) at temperatures between 160-180Â°F (71-82Â°C), just below boiling. This method is perfect for delicate foods like eggs, fish, and fruits."
    },
    {
      id: "3",
      question: "Which spice blend is essential in Indian cuisine and typically contains cumin, coriander, turmeric, and other spices?",
      options: ["Garam Masala", "Curry Powder", "Berbere", "Za'atar"],
      correctAnswer: 1,
      explanation: "Curry powder is a spice blend that typically includes turmeric (giving it the yellow color), cumin, coriander, and various other spices. While garam masala is also important in Indian cuisine, curry powder is more universally recognized for these specific base ingredients."
    }
  ];

  useEffect(() => {
    // Simulate loading questions (in the future, this would fetch from API)
    const loadQuestions = async () => {
      setLoading(true);
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      setQuestions(placeholderQuestions);
      setLoading(false);
    };

    loadQuestions();
  }, [scene.id]);

  const handleAnswerSelect = (answerIndex: number) => {
    if (quizState.showExplanation) return;
    setQuizState(prev => ({ ...prev, selectedAnswer: answerIndex }));
  };

  const handleSubmitAnswer = () => {
    if (quizState.selectedAnswer === null) return;

    const currentQuestion = questions[quizState.currentQuestionIndex];
    const isCorrect = quizState.selectedAnswer === currentQuestion.correctAnswer;

    setQuizState(prev => ({
      ...prev,
      score: isCorrect ? prev.score + 1 : prev.score,
      answeredQuestions: prev.answeredQuestions + 1,
      showExplanation: true
    }));
  };

  const handleNextQuestion = () => {
    const nextIndex = quizState.currentQuestionIndex + 1;
    
    if (nextIndex >= questions.length) {
      setQuizState(prev => ({ ...prev, isComplete: true }));
    } else {
      setQuizState(prev => ({
        ...prev,
        currentQuestionIndex: nextIndex,
        selectedAnswer: null,
        showExplanation: false
      }));
    }
  };

  const handleRestartQuiz = () => {
    setQuizState({
      currentQuestionIndex: 0,
      score: 0,
      answeredQuestions: 0,
      selectedAnswer: null,
      showExplanation: false,
      isComplete: false
    });
  };

  if (loading) {
    return (
      <div className="flex-1 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading quiz questions...</p>
        </div>
      </div>
    );
  }

  if (questions.length === 0) {
    return (
      <div className="flex-1 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600 mb-4">No questions available for this quiz.</p>
          <button 
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  if (quizState.isComplete) {
    const percentage = Math.round((quizState.score / questions.length) * 100);
    
    return (
      <div className="flex-1 flex items-center justify-center p-6">
        <div className="text-center max-w-md">
          <div className="mb-6">
            <div className="text-6xl mb-4">ðŸŽ‰</div>
            <h2 className="text-2xl font-bold mb-2">Quiz Complete!</h2>
            <p className="text-gray-600 mb-4">
              You scored {quizState.score} out of {questions.length} ({percentage}%)
            </p>
          </div>
          
          <div className="bg-gray-50 rounded-lg p-4 mb-6">
            <p className="text-sm text-gray-700 italic">
              "{percentage >= 80 ? "Excellent work! You really know your spices and cooking methods!" : 
                percentage >= 60 ? "Good job! You're on your way to mastering culinary knowledge." :
                "Keep practicing! Cooking is all about learning and improving."}"
            </p>
            <p className="text-xs text-gray-500 mt-2">- Chef Nomi</p>
          </div>

          <div className="space-y-3">
            <button 
              onClick={handleRestartQuiz}
              className="w-full px-4 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
            >
              Take Quiz Again
            </button>
            <button 
              onClick={() => window.history.back()}
              className="w-full px-4 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors"
            >
              Back to Scenes
            </button>
          </div>
        </div>
      </div>
    );
  }

  const currentQuestion = questions[quizState.currentQuestionIndex];
  const progress = ((quizState.currentQuestionIndex + 1) / questions.length) * 100;

  return (
    <div className="flex-1 flex flex-col">
      {/* Progress Bar */}
      <div className="bg-gray-200 h-2">
        <div 
          className="bg-blue-500 h-2 transition-all duration-300"
          style={{ width: `${progress}%` }}
        />
      </div>

      {/* Quiz Header */}
      <div className="p-4 border-b bg-white">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="font-semibold text-lg">{scene.title}</h1>
            <p className="text-sm text-gray-600">with {character.name}</p>
          </div>
          <div className="text-right">
            <p className="text-sm font-medium">Question {quizState.currentQuestionIndex + 1} of {questions.length}</p>
            <p className="text-xs text-gray-500">Score: {quizState.score}/{quizState.answeredQuestions}</p>
          </div>
        </div>
      </div>

      {/* Question Content */}
      <div className="flex-1 p-6 overflow-y-auto">
        <div className="max-w-2xl mx-auto">
          {/* Question */}
          <div className="mb-8">
            <h2 className="text-xl font-medium mb-6 leading-relaxed">
              {currentQuestion.question}
            </h2>

            {/* Answer Options */}
            <div className="space-y-3">
              {currentQuestion.options.map((option, index) => {
                const isSelected = quizState.selectedAnswer === index;
                const isCorrect = index === currentQuestion.correctAnswer;
                const showResult = quizState.showExplanation;
                
                let buttonClass = "w-full p-4 text-left border-2 rounded-lg transition-all ";
                
                if (showResult) {
                  if (isCorrect) {
                    buttonClass += "border-green-500 bg-green-50 text-green-800";
                  } else if (isSelected && !isCorrect) {
                    buttonClass += "border-red-500 bg-red-50 text-red-800";
                  } else {
                    buttonClass += "border-gray-200 bg-gray-50 text-gray-600";
                  }
                } else {
                  if (isSelected) {
                    buttonClass += "border-blue-500 bg-blue-50 text-blue-800";
                  } else {
                    buttonClass += "border-gray-200 hover:border-gray-300 hover:bg-gray-50";
                  }
                }

                return (
                  <button
                    key={index}
                    onClick={() => handleAnswerSelect(index)}
                    disabled={quizState.showExplanation}
                    className={buttonClass}
                  >
                    <div className="flex items-center">
                      <span className="w-8 h-8 rounded-full border-2 border-current flex items-center justify-center mr-3 text-sm font-medium">
                        {String.fromCharCode(65 + index)}
                      </span>
                      {option}
                    </div>
                  </button>
                );
              })}
            </div>
          </div>

          {/* Explanation */}
          {quizState.showExplanation && (
            <div className="mb-8 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <h3 className="font-medium text-blue-900 mb-2">Explanation</h3>
              <p className="text-blue-800 text-sm leading-relaxed">
                {currentQuestion.explanation}
              </p>
            </div>
          )}

          {/* Action Button */}
          <div className="flex justify-center">
            {!quizState.showExplanation ? (
              <button
                onClick={handleSubmitAnswer}
                disabled={quizState.selectedAnswer === null}
                className="px-8 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
              >
                Submit Answer
              </button>
            ) : (
              <button
                onClick={handleNextQuestion}
                className="px-8 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
              >
                {quizState.currentQuestionIndex + 1 >= questions.length ? 'Finish Quiz' : 'Next Question'}
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};
